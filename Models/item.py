"""
    Name: Item Model
    Description: Item model class to represent records in Item table of the database
    Author: Magaly Camacho [3072618]

    Date Created: 10/21/2024
    Revisions: 
        - 11/18/2024 Magaly Camacho
            Added relation to recurrence

    Preconditions: 
        - SQLAlchemy must be installed and configured in the environment
    Postconditions: 
        - None
    Errors/Exceptions: 
        - Validation errors if the attribute constraints (e.g. type, string length, etc.) are not met 
    Side Effects: 
        - Base class will have Item as a part of its metadata
    Invariants: 
        - The class will always be a sub class of the declarative_base from SQLAlchemy
        - The id attribute will always be unique and automatically generated
        - ItemType Enum, and Item-Category association are implemented
    Known Faults: 
        - None
"""


# Imports
from datetime import datetime
from .base import Base # base model
from .databaseEnums import ItemType # enum for types of item
from .itemCategory import item_category_association # association table
from typing import Optional, List
from sqlalchemy import String, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship


class Item(Base):
    """
    Item Model for records in the Item Table

    Attributes:
        __tablename__ (str): the name of the table
        id (int): item id (primary key, automatically generated by database)
        name (str): name of item
        type (Models.databaseEnums.ItemType): task or event
        notes (str): notes about the item, max 255 chars
        i_created (datetime): date and time item was created
        i_last_updated (datetime): date and time item was last updated
        categories (list[Category]): categories associated with this item
        recurrence_id (int): id of recurrence (optional)
        recurrence (Recurrence): reccurence object (optional)
    """
    __tablename__ = "Item"


    # Attributes, all are NOT NULL (required) except notes
    id: Mapped[int] = mapped_column(
        primary_key=True # primary key, automatically generated by database
    )
    
    name: Mapped[str] = mapped_column(String(50))
    
    type: Mapped[ItemType] # event or task
    
    notes: Mapped[Optional[str]] = mapped_column(String(255))
    
    i_created: Mapped[datetime] = mapped_column(
        default=datetime.now # defaults to inserted date and time
    )
    
    i_last_updated: Mapped[datetime] = mapped_column(
        default=datetime.now, # defaults to inserted date and time
        onupdate=datetime.now # auto update this attribute, when record is updated
    )


    # Many-to-Many relationship with Category
    categories: Mapped[Optional[List["Category"]]] = relationship( # type: ignore
        secondary=item_category_association, # association table
        back_populates="items" # attribute in Category
    )


    # Foreign Key to the Recurrence model
    recurrence_id: Mapped[Optional[int]] = mapped_column(ForeignKey("Recurrence.id"))


    # Many-to-One Relationship with Recurrence
    recurrence: Mapped[Optional["Recurrence"]] = relationship( # type: ignore
        back_populates="items" # attribute
    )

    # Discriminator, for inheritance
    __mapper_args__ = {
        "polymorphic_identity": "Item",
        "polymorphic_on": "type"
    }